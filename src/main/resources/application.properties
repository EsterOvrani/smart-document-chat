# Application Properties
spring.application.name=SmartDocumentChat

# Server Configuration
server.port=8088
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB
spring.servlet.multipart.file-size-threshold=2KB

# Logging
logging.level.com.smartdocumentchat=DEBUG
logging.level.dev.smartdocumentchat=INFO

# Qdrant Configuration
qdrant.host=${QDRANT_HOST:localhost}
qdrant.port=${QDRANT_PORT:6334}
qdrant.collection-name=${QDRANT_COLLECTION_NAME:smart_documents}
qdrant.dimension=3072
qdrant.distance=Cosine

# PostgreSQL Configuration
spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/${POSTGRES_DB:smartdocumentchat}
spring.datasource.username=${POSTGRES_USER:smartdoc_user}
spring.datasource.password=${POSTGRES_PASSWORD:smartdoc_password}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.open-in-view=false

# Database initialization
spring.jpa.defer-datasource-initialization=true
spring.sql.init.mode=always

# Redis Configuration
redis.host=${REDIS_HOST:localhost}
redis.port=${REDIS_PORT:6379}
redis.password=${REDIS_PASSWORD:smartdoc_redis_pass}
redis.database=${REDIS_DATABASE:0}
redis.timeout=${REDIS_TIMEOUT:3000}

# Spring Data Redis
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD:smartdoc_redis_pass}
spring.data.redis.database=${REDIS_DATABASE:0}
spring.data.redis.timeout=${REDIS_TIMEOUT:3000}

# Kafka Configuration
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:smart-doc-chat-group}
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.producer.acks=all
spring.kafka.producer.retries=3

# Document Processing Configuration
document.processing.max-retries=3
document.processing.retry-delay-seconds=5

# Enhanced logging for initialization
logging.level.com.smartdocumentchat.util.DataInitializer=INFO
logging.level.org.springframework.boot.CommandLineRunner=INFO

# MinIO Configuration
minio.endpoint=${MINIO_ENDPOINT:localhost:9000}
minio.access-key=${MINIO_ACCESS_KEY:minioadmin}
minio.secret-key=${MINIO_SECRET_KEY:minioadmin123}
minio.bucket-name=${MINIO_BUCKET_NAME:smart-documents}
minio.use-ssl=${MINIO_USE_SSL:false}
minio.region=us-east-1

# Enhanced Security Configuration
spring.security.user.name=admin
spring.security.user.password=admin123
spring.security.user.roles=ADMIN

# JWT Security Configuration - Enhanced
jwt.secret=${JWT_SECRET:mySecretKeyForSmartDocumentChatApplication2024!@#$%^&()_+}
jwt.issuer=${JWT_ISSUER:smart-document-chat}
jwt.access-token-expiration=${JWT_ACCESS_TOKEN_EXPIRATION:PT1H}
jwt.refresh-token-expiration=${JWT_REFRESH_TOKEN_EXPIRATION:P7D}
jwt.token-type=Bearer
jwt.header-name=Authorization
jwt.header-prefix=Bearer 
jwt.require-https=${JWT_REQUIRE_HTTPS:false}
jwt.validate-issuer=${JWT_VALIDATE_ISSUER:true}
jwt.validate-audience=${JWT_VALIDATE_AUDIENCE:false}

# Security Headers Configuration - NEW
security.headers.frame-options=${SECURITY_FRAME_OPTIONS:DENY}
security.headers.content-type-options=${SECURITY_CONTENT_TYPE_OPTIONS:nosniff}
security.headers.xss-protection=${SECURITY_XSS_PROTECTION:1; mode=block}
security.headers.hsts.max-age=${SECURITY_HSTS_MAX_AGE:31536000}
security.headers.hsts.include-subdomains=${SECURITY_HSTS_INCLUDE_SUBDOMAINS:true}
security.headers.referrer-policy=${SECURITY_REFERRER_POLICY:strict-origin-when-cross-origin}

# Enhanced Session Security Configuration
server.servlet.session.timeout=30m
server.servlet.session.cookie.name=SMARTDOC_SESSION
server.servlet.session.cookie.max-age=1800
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.secure=${SESSION_COOKIE_SECURE:false}
server.servlet.session.cookie.same-site=${SESSION_COOKIE_SAME_SITE:strict}
server.servlet.session.tracking-modes=cookie

# CORS Configuration - NEW
security.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:*,https://localhost:*}
security.cors.allowed-methods=${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
security.cors.allowed-headers=${CORS_ALLOWED_HEADERS:*}
security.cors.allow-credentials=${CORS_ALLOW_CREDENTIALS:true}
security.cors.max-age=${CORS_MAX_AGE:3600}

# Method Security Configuration - NEW
spring.security.method.enabled=true
spring.security.method.pre-post-enabled=true
spring.security.method.secured-enabled=true
spring.security.method.jsr250-enabled=true

# Authentication & Authorization Logging - Enhanced
logging.level.org.springframework.security=INFO
logging.level.org.springframework.security.access=DEBUG
logging.level.org.springframework.security.web.access=DEBUG
logging.level.com.smartdocumentchat.config.JwtAuthenticationFilter=DEBUG
logging.level.com.smartdocumentchat.service.CustomUserDetailsService=DEBUG
logging.level.com.smartdocumentchat.util.AuthenticationUtils=DEBUG

# Password Security Configuration
security.password.encoding.strength=10
security.password.min-length=${PASSWORD_MIN_LENGTH:6}
security.password.max-length=${PASSWORD_MAX_LENGTH:100}
security.password.require-uppercase=${PASSWORD_REQUIRE_UPPERCASE:false}
security.password.require-numbers=${PASSWORD_REQUIRE_NUMBERS:false}
security.password.require-special-chars=${PASSWORD_REQUIRE_SPECIAL_CHARS:false}

# Rate Limiting Configuration - NEW
security.rate-limit.enabled=${RATE_LIMIT_ENABLED:true}
security.rate-limit.requests-per-minute=${RATE_LIMIT_RPM:60}
security.rate-limit.requests-per-hour=${RATE_LIMIT_RPH:1000}
security.rate-limit.burst-capacity=${RATE_LIMIT_BURST:10}

# API Security Configuration - NEW
api.security.require-authentication=${API_REQUIRE_AUTH:true}
api.security.validate-user-ownership=${API_VALIDATE_OWNERSHIP:true}
api.security.allow-admin-override=${API_ADMIN_OVERRIDE:true}

# Endpoint Security Configuration - NEW
endpoints.security.admin-only=${ENDPOINTS_ADMIN_ONLY:/actuator/**,/api/admin/**}
endpoints.security.authenticated=${ENDPOINTS_AUTHENTICATED:/api/**}
endpoints.security.public=${ENDPOINTS_PUBLIC:/api/auth/**,/api/status,/actuator/health,/actuator/info}

# Content Security Policy - NEW
security.csp.default-src=${CSP_DEFAULT_SRC:'self'}
security.csp.script-src=${CSP_SCRIPT_SRC:'self' 'unsafe-inline'}
security.csp.style-src=${CSP_STYLE_SRC:'self' 'unsafe-inline'}
security.csp.img-src=${CSP_IMG_SRC:'self' data: https:}
security.csp.font-src=${CSP_FONT_SRC:'self'}
security.csp.connect-src=${CSP_CONNECT_SRC:'self'}
security.csp.frame-ancestors=${CSP_FRAME_ANCESTORS:'none'}

# HTTPS Configuration - NEW (for production)
server.ssl.enabled=${HTTPS_ENABLED:false}
server.ssl.key-store=${SSL_KEYSTORE:}
server.ssl.key-store-password=${SSL_KEYSTORE_PASSWORD:}
server.ssl.key-store-type=${SSL_KEYSTORE_TYPE:PKCS12}
server.ssl.key-alias=${SSL_KEY_ALIAS:smartdocumentchat}
security.require-ssl=${REQUIRE_SSL:false}

# Thymeleaf Configuration
spring.thymeleaf.cache=false
spring.thymeleaf.mode=HTML
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.servlet.content-type=text/html
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

# Static Resources Security
spring.web.resources.static-locations=classpath:/static/
spring.web.resources.cache.cachecontrol.max-age=3600
spring.web.resources.cache.cachecontrol.cache-public=true

# Actuator Security Configuration - Enhanced
management.endpoints.web.exposure.include=${ACTUATOR_ENDPOINTS:health,info,metrics}
management.endpoints.web.base-path=/actuator
management.endpoint.health.show-details=${ACTUATOR_HEALTH_DETAILS:when-authorized}
management.endpoint.health.show-components=${ACTUATOR_HEALTH_COMPONENTS:when-authorized}
management.endpoints.web.cors.allowed-origins=${ACTUATOR_CORS_ORIGINS:http://localhost:*}
management.endpoints.web.cors.allowed-methods=GET,POST
management.security.enabled=true

# Database Security Configuration - NEW
spring.jpa.properties.hibernate.connection.isolation=2
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# File Upload Security - Enhanced
spring.servlet.multipart.location=${UPLOAD_TEMP_DIR:${java.io.tmpdir}}
security.file-upload.max-files-per-request=${MAX_FILES_PER_REQUEST:10}
security.file-upload.allowed-types=${ALLOWED_FILE_TYPES:application/pdf}
security.file-upload.scan-for-viruses=${SCAN_UPLOADS:false}

# Error Handling Security - NEW
server.error.include-message=on_param
server.error.include-binding-errors=on_param
server.error.include-stacktrace=on_param
server.error.include-exception=false
security.error.sanitize-stack-traces=${SANITIZE_ERRORS:true}